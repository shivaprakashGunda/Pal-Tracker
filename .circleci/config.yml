version: 2
jobs:
  build:
    docker:
      -
        image: 'microsoft/dotnet:2.1-sdk'
        environment:
          DEBIAN_FRONTEND: noninteractive
    steps:
      - checkout
      -
        run: null
        name: 'Install MySQL'
        command: "apt-get update\napt-get -y install mysql-server\nservice mysql start\nsleep 5\n"
      -
        run:
          name: 'Install flyway'
          command: "curl https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/5.1.1/flyway-commandline-5.1.1-linux-x64.tar.gz | tar xvz\n"
      -
        run:
          name: 'Create test database and migrate'
          command: "mysql -uroot < databases/tracker/create_databases.sql\nflyway-*/flyway -url=\"jdbc:mysql://localhost:3306/tracker_dotnet_test\" -locations=filesystem:databases/tracker -user=tracker_dotnet -password=password clean migrate\n"
      -
        run: null
        name: 'Test and build'
        command: "bash ./scripts/build.sh $CIRCLE_SHA1\n"
      -
        store_artifacts:
          path: artifacts
      -
        persist_to_workspace:
          root: artifacts
          paths:
            - 'pal-tracker-*.tgz'
  deployToReview:
    docker:
      -
        image: 'microsoft/dotnet:2.1-sdk'
        environment:
          DEBIAN_FRONTEND: noninteractive
          EXTRACT_DEST: /tmp/extracted-archive
          ENVIRONMENT: review
    steps:
      -
        attach_workspace:
          at: artifacts
      -
        run:
          name: 'Install CF CLI'
          command: "apt-get update\napt-get -y install apt-transport-https ca-certificates\nwget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | apt-key add -\necho \"deb https://packages.cloudfoundry.org/debian stable main\" | tee /etc/apt/sources.list.d/cloudfoundry-cli.list\napt-get update\napt-get install cf-cli\n"
      -
        run:
          name: 'Install jq'
          command: "apt-get -y install jq\n"
      -
        run:
          name: 'Install flyway'
          command: "curl https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/5.1.1/flyway-commandline-5.1.1-linux-x64.tar.gz | tar xvz\n"
      -
        run:
          name: 'Unzip artifacts'
          command: "mkdir -p $EXTRACT_DEST\ntar -xvzf artifacts/pal-tracker-$CIRCLE_SHA1.tgz -C $EXTRACT_DEST\n"
      -
        run:
          name: Deploy
          command: "cd $EXTRACT_DEST\n\ncf login -a $CF_API -u \"$CF_USERNAME\" -p \"$CF_PASSWORD\" -o \"$CF_ORG\" -s \"$CF_SPACE_REVIEW\"\ncf push -f manifest-$ENVIRONMENT.yml\nbash ./migrate-databases.sh pal-tracker1 . /root/project\n"
  deployToProd:
    docker:
      -
        image: 'microsoft/dotnet:2.1-sdk'
        environment:
          DEBIAN_FRONTEND: noninteractive
          EXTRACT_DEST: /tmp/extracted-archive
          ENVIRONMENT: production
    steps:
      -
        attach_workspace:
          at: artifacts
      -
        run:
          name: 'Install CF CLI'
          command: "apt-get update\napt-get -y install apt-transport-https ca-certificates\nwget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | apt-key add -\necho \"deb https://packages.cloudfoundry.org/debian stable main\" | tee /etc/apt/sources.list.d/cloudfoundry-cli.list\napt-get update\napt-get install cf-cli\n"
      -
        run:
          name: 'Install jq'
          command: "apt-get -y install jq\n"
      -
        run:
          name: 'Install flyway'
          command: "curl https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/5.1.1/flyway-commandline-5.1.1-linux-x64.tar.gz | tar xvz\n"
      -
        run:
          name: 'Unzip artifacts'
          command: "mkdir -p $EXTRACT_DEST\ntar -xvzf artifacts/pal-tracker-$CIRCLE_SHA1.tgz -C $EXTRACT_DEST\n"
      -
        run:
          name: Deploy
          command: "cd $EXTRACT_DEST\n\ncf login -a $CF_API -u \"$CF_USERNAME\" -p \"$CF_PASSWORD\" -o \"$CF_ORG\" -s \"$CF_SPACE_PROD\"\ncf push -f manifest-$ENVIRONMENT.yml\nbash ./migrate-databases.sh pal-tracker2 . /root/project\n"
workflows:
  version: 2
  deployment-pipeline:
    jobs:
      - build
      -
        deployToReview:
          requires:
            - build
      -
        canDeployToProduction:
          type: approval
          requires:
            - deployToReview
      -
        deployToProd:
          requires:
            - canDeployToProduction
